谭政
什么是前端？
展示后台数据


什么是后台？
主要做一些数据的存储，以及业务逻辑。

前端和后台的开发语言：
前端：HTML 标记语言（不需要进行编译，直接由浏览器来解释执行） JS（脚本语言）
后台：java 编程语言（需要先进行编译，然后由Java虚拟机来执行）


Java学习中的重点：
1.面向对象思想
2.集合(容器)
3.多线程
4.I/O（Input/Output）处理
5.网络编程

配置环境变量的作用：为了能在命令行中，任意目录下运行执行的命令。

一、面向对象思想：
java中万物皆对象  

1.1 类Class
对现实生活中，某一类事物进行抽象，可以得到一个类。这个类就可以用来描述这一类事物。比如：人类、鸟类。

1.2 类和对象的关系
对象是类的一个实例。类是创建对象的模板。

1.3 类的声明
声明一个鸟类，格式如下:
class Bird{

  

}

1.4 java中的数据类型
基本数据类型:
整型
byte(1个字节) 11001100 2^8=256 
short 占2个字节
int  占4个字节
long 占8个字节
char 占2个字节
浮点型
float 占4个字节
double 占8个字节
布尔型
boolean 占1个字节

注意：java中声明变量时，必须明确指定变量的类型。跟js不一样

在java中除了8种基本数据类型之外的数据类型，都可以叫做引用数据类型。




1.5 构造方法
java中的每一个类，都默认有一个无参数的构造方法。
构造方法的定义格式：
权限修饰符 类名(形式参数1,形式参数2...){
   语句1；
   语句2；
   ...
}

声明在类中的变量叫全局变量，声明在方法内部的变量叫局部变量。全局变量可以不赋值，局部变量在使用之前一定要先赋值。

1.6 成员方法
声明在java类中的方法叫做类的成员方法。
成员方法的定义格式：
权限修饰符 返回值类型 方法名(形式参数1,形式参数2...){
   语句1；
   语句2；
   ...
}

权限修饰符包括 public ,protected , default,private四种.



练习：
1.定义一个电脑类，要求电脑类中有品牌、价格、型号等属性，并且有一个带参数的构造方法，这个构造方法可以给以上属性进行赋值。
2.在该类中给每一个属性声明get和set方法。get方法用于获取对应属性的值，set方法用于设置对应属性的值。
3.编写一个测试类，创建一个电脑类的对象，初始值 品牌为：联想  价格：3000  型号：T400.
4.调用该对象的set方法，把价格改为5000。并且输出修改后的结果。


1.7 this关键字
this关键字代表着被调用方法的那个引用的内存地址。


1.8 static关键字
static 关键字用来修饰静态变量或者静态方法。
static声明的静态变量，是全局共享的，也就是该类的所有对象共享。
static修饰的方法，调用不依赖于对象，依赖于类名。一般static关键字用来修饰方法，是为了让方法更便于调用，比如工具方法。



1.9 面向对象三大特性
1.9.1 封装  封装的目的在于复用，以及保证数据安全。
1.9.2 继承  extends关键字 满足继承关系的条件：is-a;继承的好处是增加代码的复用性，缺点是增加了类之间的耦合度。java中不允许多继承的，即一个类最多只能继承于一个父类，但是可以多重继承
1.9.3 多态  同一个实体，在不同的环境下表现出的形态不一样，这就叫多态。比如：子类的对象可以当做父类的对象用，也可以当成子类本身来用。

2.0 接口 Interface
定义格式：
权限修饰符 interface 接口名{
       方法1;
       方法2;
       ...
}
接口中的方法全都是抽象方法，抽象方法就是没有方法的具体实现，只是声明方法。接口中的方法需要在实现该接口的类中去编写具体的方法体。
接口的作用：可以对类的功能进行扩展。
类与接口的关系是 “实现”（implements）



二、集合
List集合:其实就是用来存放数据的容器，集合中可以存放任意类型的数据。



三、线程
3.1
什么是线程？
线程是CPU调度执行的最小单位。线程依赖于进程而存在。
什么是进程？
进程是操作系统分配资源的最小单位。我们通常可以把一个正在运行的应用程序看做是一个进程。
生活中的例子：包工头，类似我们的进程，包工头提供劳动工具和建筑材料（资源）。建筑工人，相当于线程。建筑工人拿着包工头提供的资源去进行工作。
一个包工头手下可以有多个建筑工人。我们的进程中，也可以有多个线程。

多线程的好处：提高CPU的利用率。但是需要注意线程不能太多，太多会造成资源不足线程抢占资源的情况。


3.2 java中要实现一个自己的线程可以有两种方式
第一种方式：写一个类继承于Thread类，并且覆盖Thread类中的run方法，如：
class MyThread extends Thread{
    public void run(){
        线程执行的语句;
    }
}
MyThread thread = new MyThread();
thread.start();


第二种方式：实现Runnable接口，并且覆盖Runnable接口中的run方法,如：
class MyThread  implements Runnable{
    public void run(){
        线程执行的语句;
    }
}

Thread thread = new Thread(new MyThread());
thread.start();



四、I/O处理
RAM Random Access Memory 随机访问存储器 （内存）
在操作系统中，通常是把数据以文件的形式存储在ROM(Read Only Memory ,例如硬盘、U盘)中,文件其实是存放数据的一个容器而已。
Person{
    private String name;
    private int age;
}

class File{
    private int length;
    private String name;
}


文件操作之递归遍历:
拿到一个目录之后，首先拿到这个目录中所有的文件和文件夹数组，再去遍历这个文件和文件夹的数组。
分别判断每一个文件对象表示的是文件还是目录，如果是文件就直接输出该文件的名字。如果是文件夹，
则需要再次获取这个文件夹中的所有的文件和文件夹数组。


4.1 InputStream、OutputStream java的输入输出流。
在java眼中，所有的数据都可以通过流来进行操作。java所描述的输入和输出都是相对于内存而言的。

FileInputStream 类，是文件输入流，这个类可以把硬盘上的文件中的数据，读取到内存。
FileOutputStream 类，是文件输出流，这个类可以把内存中的数据，写入到硬盘上。


文件复制操作：
1.首先用FileInputStream跟复制的源文件进行关联，用FileOutputStream跟复制到的目标文件进行关联。
2.从FileInputStream中读取数据，同时将读取到的数据用FileOutputStream写到目标文件中。
3.当数据读取完毕之后，将两个流关闭掉。

将D:盘根目录下的data.txt 复制到C：根目录。


内存输出流：ByteArrayOutputStream
作用：把读取到的数据暂时放到内存中积攒起来，然后进行统一处理。
应用场景：读取大文本时，为了防止编码出现乱码，可以把文本全部去读完毕之后在进行统一转码。

五、网络编程
IP地址:作为网络中，某台物理设备的唯一标识。
端口号(port)：作为某台物理设备上，某个应用程序的唯一标识。取值范围：0~65535，其中0~1024为系统保留端口。
通信协议：人为约定好的一种规范。常见的通信协议：TCP/IP、UDP、Http协议、ftp协议
TCP协议：是一种面向连接的传输协议，每次传输数据包，都会对数据包进行校验。这种协议的传输安全性高，不容易造成数据包的丢失。
UDP协议：是一种面向无连接的广播式的传输协议。这种协议不会对数据包进行校验，容易造成数据包的丢失。
Http协议：超文本传输协议，基于TCP协议封装的协议。
ftp协议:文件传输协议，基于TCP协议封装的。



TCP协议在java中的使用：
TCP协议分为服务端和客户端
Socket 客户端套接字
ServerSocket 服务端套接字.

HTTP协议分为请求头、请求体（有客户端发出）。响应头，响应体（由服务器发出）


六、json字符串
json字符串一般用于服务器和客户端（前端）进行数据通信的一种格式，常见的服务器和客户端数据通信的格式还有xml。
[{name:"ivan",age:"12"},{name:"tom",age:"18"}]

在工程中带入GSON jar包：
打开右上角的Project Structure选项-->Dependencies-->点击右边的+号-->选择JRS or directories  -->选中lib文件中的Gsonjar包
Gson解析的套路：
看到大括号，就去新建类，看到key，就在类中建属性，注意属性的名字必须跟key名字要一致，看到中括号就在类中新建一个集合

例外：
如果json字符串直接是[]开头，则解析的时候需要创建一个TypeToken<ArrayList<类型>>对象.解析出来的时候直接获取到的就是一个数据集合.




七、数据库
常用的数据库：Oracle、mysql、sqlserver2000、Sqlite
用来操作数据库的语言：sql语言



创建表：create table student(id int primary key auto_increment,name varchar(20) not null,age int not null);
插入数据:insert into student(id,name,age) values (0,"Jame",10);
修改数据: update student set age=35 where id = 6; 把id为6的那条数据的年级改为35
删除数据: delete from student where age<10; 删除年级小于10的数据
查询数据: select * from student where age>30; 查询出数据库中，年级大于30的所有数据

